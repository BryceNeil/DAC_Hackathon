// Sequence Detector for "0011"
// Generated by ASU Tapeout Agent

module seq_detector_0011(
    input clk,
    input reset,
    input data_in,
    output reg detected
);

    // State encoding
    localparam IDLE = 3'b000;
    localparam S1   = 3'b001;  // Detected first bit
    localparam S2   = 3'b010;  // Detected first two bits
    localparam S3   = 3'b011;  // Detected first three bits
    localparam S4   = 3'b100;  // Detected full sequence
    
    reg [2:0] current_state, next_state;
    
    // State register
    always @(posedge clk) begin
        if (reset)
            current_state <= IDLE;
        else
            current_state <= next_state;
    end
    
    // Next state logic for sequence "0011"
    always @(*) begin
        next_state = current_state;
        detected = 1'b0;
        
        case (current_state)
            IDLE: begin
                if (data_in == 1'b0)
                    next_state = S1;
            end
            
            S1: begin
                if (data_in == 1'b0)
                    next_state = S2;
                else if (data_in == 1'b0)
                    next_state = S1;
                else
                    next_state = IDLE;
            end
            
            S2: begin
                if (data_in == 1'b1)
                    next_state = S3;
                else if (data_in == 1'b0)
                    next_state = S1;
                else
                    next_state = IDLE;
            end
            
            S3: begin
                if (data_in == 1'b1) begin
                    detected = 1'b1;  // Sequence detected!
                    // For "0011", last two bits are "11", so if next bit is "0", 
                    // we could start a new sequence "0011" (overlapping)
                    next_state = IDLE;  // Go back to IDLE to check for new sequences
                end
                else if (data_in == 1'b0)
                    next_state = S1;  // Start new sequence
                else
                    next_state = IDLE;
            end
            
            default: next_state = IDLE;
        endcase
    end

endmodule
