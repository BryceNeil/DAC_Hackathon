// Dot Product Calculator Template
// Computes dot product of {{ n_elements }} element vectors

{{ module_signature }}
    // Pipeline stages
    localparam STAGES = {{ pipeline_stages }};
    
    // Internal signals
    {% for i in range(n_elements) %}
    wire [{{ product_width-1 }}:0] product_{{ i }};
    {% endfor %}
    
    // Multiplication stage
    {% for i in range(n_elements) %}
    assign product_{{ i }} = a[{{ (i+1)*element_width-1 }}:{{ i*element_width }}] * 
                             b[{{ (i+1)*element_width-1 }}:{{ i*element_width }}];
    {% endfor %}
    
    // Addition tree
    {% if pipeline_stages > 0 %}
    // Pipelined implementation
    reg [{{ product_width-1 }}:0] stage1_products [0:{{ n_elements-1 }}];
    reg [{{ result_width-1 }}:0] stage2_sum;
    
    always @(posedge clk) begin
        if (reset) begin
            {% for i in range(n_elements) %}
            stage1_products[{{ i }}] <= 0;
            {% endfor %}
            stage2_sum <= 0;
            result <= 0;
        end else begin
            // Pipeline stage 1: Register products
            {% for i in range(n_elements) %}
            stage1_products[{{ i }}] <= product_{{ i }};
            {% endfor %}
            
            // Pipeline stage 2: Sum all products
            stage2_sum <= {% for i in range(n_elements) %}
                stage1_products[{{ i }}]{% if i < n_elements-1 %} + {% endif %}
            {% endfor %};
            
            // Pipeline stage 3: Output
            result <= stage2_sum;
        end
    end
    {% else %}
    // Combinational implementation
    assign result = {% for i in range(n_elements) %}
        product_{{ i }}{% if i < n_elements-1 %} + {% endif %}
    {% endfor %};
    {% endif %}
    
endmodule 