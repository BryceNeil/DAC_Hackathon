dot_product:
  description: >
    Parameterized pipelined dot product engine.
    Accepts two input vectors A and B of length N, performs element-wise signed multiplication    followed by summation of partial products. The result is a single signed scalar value with a valid flag.

  tech_node: SkyWater 130HD
  clock_period: 4.5ns

  parameters:
    N: 8             # Vector length
    WIDTH: 8         # Bit width of signed input elements

  ports:
    - name: clk
      direction: input
      type: logic
      description: Clock input (rising-edge)

    - name: rst
      direction: input
      type: logic
      description: Active-high synchronous reset

    - name: A
      direction: input
      type: logic signed [N-1:0][WIDTH-1:0]
      description: Packed signed vector input A

    - name: B
      direction: input
      type: logic signed [N-1:0][WIDTH-1:0]
      description: Packed signed vector input B

    - name: dot_out
      direction: output
      type: logic signed [2*WIDTH+3:0]
      description: Final dot product result (signed scalar)

    - name: valid
      direction: output
      type: logic
      description: High for one cycle when dot_out is valid

  module_signature: |
    module dot_product #(
        parameter int N = 8,
        parameter int WIDTH = 8
    ) (
        input  logic clk,
        input  logic rst,
        input  logic signed [N-1:0][WIDTH-1:0] A,
        input  logic signed [N-1:0][WIDTH-1:0] B,
        output logic signed [2*WIDTH+3:0] dot_out,
        output logic valid
    );

  sample_usage:
    description: >
      A single test case for N=8 and WIDTH=8, with precomputed dot product result shown.
    clk_sequence:   [1, 0, 1, 0, 1, 0]
    rst_sequence:   [1, 0, 0, 0, 0, 0]
    A_sequence:
      - [[-40, 50, -50, 31, 14, 9, 6, -32]]
    B_sequence:
      - [[-1, 30, 41, 14, 37, 50, 22, 29]]
    expected_valid: [0, 0, 1, 0, 0, 0]
    expected_dot_out:
      - [96]      # Computed: sum(A[i] * B[i])

